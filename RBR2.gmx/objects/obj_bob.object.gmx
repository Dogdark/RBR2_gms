<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bob</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>X = 0;
Y = 1;

enum timers {
    attackR,
    attackU,
    attackL,
    attackD,
    comboSpace,
    main,
    rigthAD,
    upAD,
    leftAD,
    downAD
}

enum dir{
    no,
    right,
    up,
    left,
    down
}

enum wall {
    NO,
    LEFT,
    RIGHT
}

nrOfTimers = 7
/*
[0] attack right
[1] attack up
[2] attack left
[3] attack down
[4] combo space
[5] main
[6] attack duration
*/
for (i = 0; i  &lt; nrOfTimers; i++)
{
    cooldownTimers[i] = 0
}

//combo space
comboSpace = 0.1
//main cooldown
cooldownMain = 1;
//attack duartion
attackDuration = 0.2

//speed when moving sideways
mySpeed = 2;
//sped currently moving veritcaly
hSpeed = 0;
// the speed your jump astarts at
jumpForce = -4;
// the retardation of bob  horizontaly
drag = 0.05
//the delay before bob releases from the wall in seconds
releaseDelay = 0.2

//walk accelleration
accelleration = 0.1

//the global gravity aceleration
grav = 0.1;
// current fallspeed
fallSpeed = 0;
// maximum fallspeed
maxFallsp = 5;
fallLimit = maxFallsp;
//speed when bob glides down the wall
wallGlide = 1

isFalling = false;
closeToWall = wall.NO

//setting timers 
relDelTimer = -1

//force using to jump from wall
wallJump = 4

wallRelDel = false

//lunge speed
lungeSpeed = 10

//sword position
swordHiltPos[0] = 0
swordHiltPos[1] = 0
swordTipPos[0] = 0
swordTipPos[1] = 0

// end position right
/*
[0] hilt x
[1] hilt y
[2] tip x
[3] tip y
*/


sRightEndPos[0] = 0
sRightEndPos[1] = 0
sRightEndPos[2] = -32
sRightEndPos[3] = 0

sUpEndPos[0] = 0
sUpEndPos[1] = 0
sUpEndPos[2] = 0
sUpEndPos[3] = -32

sLeftEndPos[0] = 0
sLeftEndPos[1] = 0
sLeftEndPos[2] = 32
sLeftEndPos[3] = 0

sDownEndPos[0] = 0
sDownEndPos[1] = 0
sDownEndPos[2] = 0
sDownEndPos[3] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement 

//setting up the variables to keep wher the new object will end up
var tempPosX = x
var tempPosY = y


// fall check
//checks if bob is standing on a tile and sets isFalling to false if he is
if  collision_line(x - 10, y + 12, x + 10, y + 12, obj_tile, false, false) != noone
{
    isFalling = false
}
else
{
    isFalling = true
}


//wall check
//checks if bob is next to a wall
if collision_line(x - 11, y + 11, x - 11, y - 12, obj_tile, false, false)
{
    closeToWall = wall.LEFT
}
else if collision_line(x + 11, y + 11, x + 11, y - 12, obj_tile, false, false)
{
    closeToWall = wall.RIGHT
}
else
{
    closeToWall = wall.No
}

//wall grab
if closeToWall &amp;&amp; (( keyboard_check(ord('A')) || keyboard_check(ord('D')) ) ||  wallRelDel == true)
{   
    fallLimit = wallGlide

}
else
{
    fallLimit = maxFallsp
}

if (keyboard_check_released(ord('A')) || keyboard_check_released(ord('D')))
{
    wallRelDel = true
    relDelTimer = releaseDelay * 120
}

//timer update
if relDelTimer &gt;= 0
{
    relDelTimer -=1
}

if relDelTimer == 0
{
    wallRelDel = false
}

/*
timers:
[0] attack right
[1] attack up
[2] attack left
[3] attack down
[4] combo-space
[5] main
[6] attack duartion
*/
for (i = 0; i  &lt; nrOfTimers; i++)
{
    if cooldownTimers[i] &gt;= 0
    {
        cooldownTimers[i] -= 1
    }
}

//if bob is falling then accellerate downwards
if isFalling == true
{
    fallSpeed += grav
    if fallSpeed &gt; fallLimit
    {
        fallSpeed = fallLimit;
    }    
}
else
{
    fallSpeed = 0
}

//jump input
if keyboard_check_pressed(vk_space) == true &amp;&amp; isFalling == false
{
    fallSpeed = jumpForce
}
else if keyboard_check_pressed(vk_space) &amp;&amp; closeToWall = wall.LEFT
{
    fallSpeed = jumpForce
    hSpeed = wallJump
}
else if keyboard_check_pressed(vk_space) &amp;&amp; closeToWall = wall.RIGHT
{
    fallSpeed = jumpForce
    hSpeed = -wallJump
}

//lef/right input
if keyboard_check(ord('A'))
{
    
    if hSpeed &gt; -mySpeed
    {
        hSpeed -= accelleration
    }
}
else if keyboard_check(ord('D'))
{
    
    if hSpeed &lt; mySpeed
    {
        hSpeed += accelleration
    }  
}

// drag calculation
if hSpeed &gt; 0
{
    hSpeed -= drag
}
else if hSpeed &lt; 0
{
    hSpeed += drag
}

//attack
if keyboard_check_pressed(vk_right) &amp;&amp; attack == dir.no
{
    attack = dir.right
    cooldownTimers[6] = attackDuration * 120
    cooldownTimers[timers.attackR] = cooldownMain * 120
}
else if keyboard_check_pressed(vk_up) &amp;&amp; attack == dir.no
{
    attack = dir.up
    cooldownTimers[6] = attackDuration * 120
    cooldownTimers[timers.attackU] = cooldownMain * 120
}
else if keyboard_check_pressed(vk_left) &amp;&amp; attack == dir.no
{
    attack = dir.left
    cooldownTimers[6] = attackDuration * 120
    cooldownTimers[timers.attackL] = cooldownMain * 120
}
else if keyboard_check_pressed(vk_down) &amp;&amp; attack == dir.no &amp;&amp; isFalling
{
    attack = dir.down
    cooldownTimers[6] = attackDuration * 120
    cooldownTimers[timers.attackD] = cooldownMain * 120
}

//attack animation and collision
if attack != dir.no
{
    var hitEnemy = collision_line(x + swordHiltPos[X],y + swordHiltPos[Y],x + swordTipPos[X],y + swordTipPos[Y], obj_enemy, false, false)
    
    switch attack
    {
    case dir.right:
        swordTipPos[X] = sRightEndPos[2] * (1- cooldownTimers[6]/(attackDuration * 120))
        break
    case dir.up:
        swordTipPos[Y] = sUpEndPos[3] * (1- cooldownTimers[6]/(attackDuration * 120))
        break
    case dir.left:
        swordTipPos[X] = sLeftEndPos[2] * (1- cooldownTimers[6]/(attackDuration * 120))
        break
    case dir.down:
        swordTipPos[X] = sDownEndPos[2] * (1- cooldownTimers[6]/(attackDuration * 120))
        swordTipPos[Y] = sDownEndPos[3] * (1- cooldownTimers[6]/(attackDuration * 120))
    }
}

//gravity collision
if fallSpeed &gt;= 0
{
    var vCollision = collision_line(x - 10, y + 12 + fallSpeed, x + 10, y + 12 + fallSpeed, obj_tile, false, false);
    if vCollision == noone
    {
        tempPosY += fallSpeed;
    }
    else
    {
        tempPosY = vCollision.y -12 
    }
}
else
{
    var vCollision = collision_line(x - 10, y - 12 + fallSpeed, x + 10, y - 12 + fallSpeed, obj_tile, false, false);
    if vCollision == noone
    {
        tempPosY += fallSpeed;
    }
    else
    {
        tempPosY = vCollision.y +12 +32
        fallSpeed = 0;
    }
}

// vertical collision
if hSpeed &lt; 0
{   
    var vCollider = collision_line(x -10 + hSpeed, tempPosY - 11, x -10 + hSpeed, tempPosY + 11, obj_tile, false, false)
    if vCollider == noone
    {
        tempPosX += hSpeed
    }
    else
    {
        tempPosX = vCollider.x +32 +10
    }
}
else if hSpeed &gt; 0
{   
    var vCollider = collision_line(x +10 + hSpeed, tempPosY - 11, x +10 + hSpeed, tempPosY + 11, obj_tile, false, false);
    if vCollider == noone
    {
        tempPosX += hSpeed
    }
    else
    {
        tempPosX = vCollider.x - 11
    }
}

//movement execution
//all movement is executed here
x = tempPosX
y = tempPosY

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

//drawing sword collision line
//Only for bugtesting
if global.debug
{
    draw_set_colour(c_lime)
    draw_line(x + swordHiltPos[X],y + swordHiltPos[Y],x + swordTipPos[X],y + swordTipPos[Y])
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
