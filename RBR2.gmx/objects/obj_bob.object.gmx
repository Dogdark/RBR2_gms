<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bob</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum wall {
    NO,
    LEFT,
    RIGHT
}

mySpeed = 2;
vSpeed = 0;
jumpForce = -4;
drag = 0.05

//the global gravity aceleration
grav = 0.1;
// current fallspeed
fallSpeed = 0;
// maximum fallspeed
maxFallsp = 5;
fallLimit = maxFallsp;
//speed when bob glides down the wall
wallGlide = 1

isFalling = false;
closeToWall = wall.NO


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement 

//setting up the variables to keep wher the new object will end up
var tempPosX = x
var tempPosY = y


// fall check
//checks if bob is standing on a tile and sets isFalling to false if he is
if  collision_line(x - 10, y + 12, x + 10, y + 12, obj_tile, false, false) != noone
{
    isFalling = false
}
else
{
    isFalling = true
}


//wall check
//checks if bob is next to a wall
if collision_line(x - 11, y + 11, x - 11, y - 12, obj_tile, false, false)
{
    closeToWall = wall.LEFT
}
else if collision_line(x + 11, y + 11, x + 11, y - 12, obj_tile, false, false)
{
    closeToWall = wall.RIGHT
}
else
{
    closeToWall = wall.NO
}

//wall grab
if closeToWall &amp;&amp; (( keyboard_check(ord('A') || keyboard_check('D')) ) ||  wallRelDel == true)
{   
    fallLimit = wallGlide
}
else
{
    fallLimit = maxFallsp
}

if keyboard_check_released('A') || keyboard_check_released('D')
{
    wallRelDel = true
}

//if bob is fallinjg the accellerate downwards
if isFalling == true
{
    fallSpeed += grav
    if fallSpeed &gt; fallLimit
    {
        fallSpeed = fallLimit;
    }    
}
else
{
    fallSpeed = 0
}

//jump input
if keyboard_check_pressed(vk_space) == true and isFalling == false
{
    fallSpeed = jumpForce
}

//lef/right input
if keyboard_check(ord('A'))
{
    vSpeed = -mySpeed
}
else if keyboard_check(ord('D'))
{
    vSpeed = mySpeed
}
else if vSpeed &gt; 0
{
    vSpeed -= drag
}
else if vSpeed &lt; 0
{
    vSpeed += drag
}

//gravity collision
if fallSpeed &gt;= 0
{
    var vCollision = collision_line(x - 10, y + 12 + fallSpeed, x + 10, y + 12 + fallSpeed, obj_tile, false, false);
    if vCollision == noone
    {
        tempPosY += fallSpeed;
    }
    else
    {
        tempPosY = vCollision.y -12 
    }
}
else
{
    var vCollision = collision_line(x - 10, y - 12 + fallSpeed, x + 10, y - 12 + fallSpeed, obj_tile, false, false);
    if vCollision == noone
    {
        tempPosY += fallSpeed;
    }
    else
    {
        tempPosY = vCollision.y +12 +32
        fallSpeed = 0;
    }
}

// vertical collision
if vSpeed &lt; 0
{   
    var vCollider = collision_line(x -10 + vSpeed, tempPosY - 11, x -10 + vSpeed, tempPosY + 11, obj_tile, false, false)
    if vCollider == noone
    {
        tempPosX += vSpeed
    }
    else
    {
        tempPosX = vCollider.x +32 +10
    }
}
else if vSpeed &gt; 0
{   
    var vCollider = collision_line(x +10 + vSpeed, tempPosY - 11, x +10 + vSpeed, tempPosY + 11, obj_tile, false, false);
    if vCollider == noone
    {
        tempPosX += vSpeed
    }
    else
    {
        tempPosX = vCollider.x - 11
    }
}



//movement execution
//all movement is executed here
x = tempPosX
y = tempPosY

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
